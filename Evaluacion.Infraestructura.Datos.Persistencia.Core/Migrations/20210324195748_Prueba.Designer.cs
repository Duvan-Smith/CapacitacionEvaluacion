// <auto-generated />
using System;
using Evaluacion.Infraestructura.Datos.Persistencia.Core.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Evaluacion.Infraestructura.Datos.Persistencia.Core.Migrations
{
    [DbContext(typeof(ContextoDb))]
    [Migration("20210324195748_Prueba")]
    partial class Prueba
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Evaluacion.Dominio.Core.Especificas.Empleados.EmpleadoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AreaEntityId");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Especificas.Personas.PersonaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmpleadoEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("FechaNacimiento")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FechaRegistro")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumeroTelefono")
                        .HasColumnType("int");

                    b.Property<Guid>("ProveedorEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TipoDocumentoEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TipoDocumentoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoEntityId");

                    b.HasIndex("ProveedorEntityId");

                    b.HasIndex("TipoDocumentoEntityId");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Especificas.Proveedores.ProveedorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Genericas.Areas.AreaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PersonaEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonaEntityId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Genericas.TipoDocumentos.TipoDocumentoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodigoTipoDocumento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NombreTipoDocumento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoDocumento");
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Especificas.Empleados.EmpleadoEntity", b =>
                {
                    b.HasOne("Evaluacion.Dominio.Core.Genericas.Areas.AreaEntity", null)
                        .WithMany("Empleado")
                        .HasForeignKey("AreaEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Especificas.Personas.PersonaEntity", b =>
                {
                    b.HasOne("Evaluacion.Dominio.Core.Especificas.Empleados.EmpleadoEntity", null)
                        .WithMany("Persona")
                        .HasForeignKey("EmpleadoEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evaluacion.Dominio.Core.Especificas.Proveedores.ProveedorEntity", null)
                        .WithMany("Persona")
                        .HasForeignKey("ProveedorEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evaluacion.Dominio.Core.Genericas.TipoDocumentos.TipoDocumentoEntity", null)
                        .WithMany("Persona")
                        .HasForeignKey("TipoDocumentoEntityId");
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Genericas.Areas.AreaEntity", b =>
                {
                    b.HasOne("Evaluacion.Dominio.Core.Especificas.Personas.PersonaEntity", null)
                        .WithMany("Area")
                        .HasForeignKey("PersonaEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Especificas.Empleados.EmpleadoEntity", b =>
                {
                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Especificas.Personas.PersonaEntity", b =>
                {
                    b.Navigation("Area");
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Especificas.Proveedores.ProveedorEntity", b =>
                {
                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Genericas.Areas.AreaEntity", b =>
                {
                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Evaluacion.Dominio.Core.Genericas.TipoDocumentos.TipoDocumentoEntity", b =>
                {
                    b.Navigation("Persona");
                });
#pragma warning restore 612, 618
        }
    }
}
